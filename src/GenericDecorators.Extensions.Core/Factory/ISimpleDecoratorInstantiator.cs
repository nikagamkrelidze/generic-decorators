using System;
using System.Collections.Generic;

namespace GenericDecorators.Extensions.Core.Factory;

/// <summary>
/// The interface for the instantiator of simple decorators, to be generated by the library.
/// </summary>
public interface ISimpleDecoratorInstantiator
{
    /// <summary>
    /// Used to instantiate a simple decorator using instantiator generated by the library and injected via <see cref="DecoratorsFactory"/>.
    /// </summary>
    /// <typeparam name="TInterface">The interface to be decorated.</typeparam>
    /// <typeparam name="TInterceptor">The interceptor to be used.</typeparam>
    /// <param name="underlyingImplementation">The underlying implementation of the interface.</param>
    /// <param name="applicableMembers">The members to be intercepted.</param>
    /// <param name="interceptor">The underlying interceptor.</param>
    /// <returns>The decorated interface.</returns>
    TInterface Instantiate<TInterface, TInterceptor>(
        TInterface underlyingImplementation,
        HashSet<string>? applicableMembers,
        TInterceptor interceptor)
        where TInterface : class;

    Type GetDecoratorType<TInterface, TInterceptor>();
}
